#<?cfg paf policy ?>

needCalibRegistry: false

levels: {
    skyTile: "run" "camcol" "frame" "band"
    run: "camcol" "frame" "band"
    camcol: "frame" "band"
    frame: "band"
}
defaultLevel: "frame"
defaultSubLevels: {
    skyTile: "frame"
    run: "frame"
    camcol: "frame"
    frame: "band"
}

exposures: {
    fpC: {
        template:    "%(run)d/%(rerun)d/corr/%(camcol)d/fpC-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fit.gz"
        python:     "lsst.afw.image.ImageU"
        persistable:         "ImageU"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    fpM: {
        template:    "%(run)d/%(rerun)d/objcs/%(camcol)d/fpM-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fit"
        python:     "lsst.afw.image.ImageU"
        persistable:         "ImageU"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    coadd: {
        template:    "%(band)s/fpC-%(run)06d-%(band)s%(camcol)d-%(frame)04d_ts_coaddNorm_NN.fit.gz"
        python:     "lsst.afw.image.ImageF"
        persistable:         "ImageF"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    calexp: {
        template:      "calexp/%(run)d/%(camcol)d/%(band)s/calexp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
}

datasets: {
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    psField: {
        template:    "%(run)d/%(rerun)d/objcs/%(camcol)d/psField-%(run)06d-%(camcol)d-%(frame)04d.fit"
        python:     "lsst.afw.detection.Psf"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }
    asTrans: {
        template:    "%(run)d/%(rerun)d/astrom/asTrans-%(run)06d.fit"
        python:     "lsst.afw.image.Wcs"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }
    tsField: {
        template:    "%(run)d/%(rerun)d/calibChunks/%(camcol)d/tsField-%(run)06d-%(camcol)d-%(rerun)d-%(frame)04d.fit"
        python:     "lsst.afw.image.Calib"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }


    icSrc: {
        template:      "icSrc/%(run)d/%(camcol)d/%(band)s/icSrc-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "icMatch/%(run)d/%(camcol)d/%(band)s/icMatch-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    psf: {
        template:      "psf/%(run)d/%(camcol)d/%(band)s/calexp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    apCorr: {
        template:      "apCorr/%(run)d/%(camcol)d/%(band)s/calexp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    src: {
        template:      "src/%(run)d/%(camcol)d/%(band)s/src-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forcedsources: {
        template:      "forcedsources/%(run)d/%(camcol)d/%(band)s/src-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    sourceHist: {
        template:      "results/st%(skyTile)d/sourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSourceHist: {
        template:      "results/st%(skyTile)d/badSourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    source: {
        template:      "results/st%(skyTile)d/source.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSource: {
        template:      "results/st%(skyTile)d/badSource.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    invalidSource: {
        template:      "results/st%(skyTile)d/invalidSource.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    object: {
        template:      "results/st%(skyTile)d/object.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badObject: {
        template:      "results/st%(skyTile)d/badObject.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_config: {
        template:      "processCcd_config/%(run)d/%(camcol)d/%(band)s/calexp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.py"
        python:        "lsst.pex.config.Config"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/%(run)d/%(camcol)d/%(band)s/calexp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd: {
        template:    "deepCoadd/%(band)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(band)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_psf: {
        template:    "deepCoadd/%(band)s/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/%(band)s/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    goodSeeingCoadd: {
        template:    "goodSeeingCoadd/%(band)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_depth: {
        template:    "goodSeeingCoadd/%(band)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_psf: {
        template:    "goodSeeingCoadd/%(band)s/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    goodSeeingCoadd_skyMap: {
        template:    "goodSeeingCoadd/%(band)s/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    chiSquaredCoadd: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    chiSquaredCoadd_psf: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    chiSquaredCoadd_skyMap: {
        template:    "chiSquaredCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    coaddTempExp: {
        template:    "coaddTempExp/%(band)s/%(tract)d/%(run)d/%(camcol)d/coaddTemp-%(run)06d-%(band)s%(camcol)d-%(frame)04d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
}
