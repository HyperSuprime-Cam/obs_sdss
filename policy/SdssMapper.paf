#<?cfg paf policy ?>

needCalibRegistry: false

levels: {
    skyTile: "run" "camcol" "field" "filter"
    run: "camcol" "field" "filter"
    camcol: "field" "filter"
    field: "filter"
}
defaultLevel: "field"
defaultSubLevels: {
    skyTile: "field"
    run: "field"
    camcol: "field"
    field: "filter"
}

exposures: {
    fpC: {
        template:    "%(run)d/%(rerun)d/corr/%(camcol)d/fpC-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fit.gz"
        python:     "lsst.afw.image.ImageU"
        persistable:         "ImageU"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    fpM: {
        template:    "%(run)d/%(rerun)d/objcs/%(camcol)d/fpM-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fit"
        python:     "lsst.afw.image.ImageU"
        persistable:         "ImageU"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd: {
        template:    "%(filter)s/fpC-%(run)06d-%(filter)s%(camcol)d-%(field)04d_ts_coaddNorm_NN.fit.gz"
        python:     "lsst.afw.image.ExposureF"
        persistable:         "ExposureF"
        storage:     "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    calexp: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/calexp/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd_calexp: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/calexp/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:       "None"
        tables:        raw
        tables:        raw_skyTile
    }
    coaddTempExp: {
        template:    "coaddTempExp/%(filter)s/%(tract)d/%(patch)s/%(run)d/%(camcol)d/coaddTemp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
}

datasets: {
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    goodSeeingCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    goodSeeingCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    deepCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    chiSquaredCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    keithCoaddId: {
        template:     "ignored"
        # Provide something to import, although we actually return a Long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    keithCoaddId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    psField: {
        template:    "%(run)d/%(rerun)d/objcs/%(camcol)d/psField-%(run)06d-%(camcol)d-%(field)04d.fit"
        python:     "lsst.afw.detection.Psf"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }
    asTrans: {
        template:    "%(run)d/%(rerun)d/astrom/asTrans-%(run)06d.fit"
        python:     "lsst.afw.image.Wcs"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }
    tsField: {
        template:    "%(run)d/%(rerun)d/calibChunks/%(camcol)d/tsField-%(run)06d-%(camcol)d-%(rerun)d-%(field)04d.fit"
        python:     "lsst.afw.image.Calib"
        persistable:         "ignored"
        storage:     "FitsStorage"
        tables:        raw
    }


    icSrc: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/icSrc/icSrc-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/icMatch/icMatch-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    psf: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/psf/psf-%(run)06d-%(filter)s%(camcol)d-%(field)04d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    apCorr: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/apCorr/apCorr-%(run)06d-%(filter)s%(camcol)d-%(field)04d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    src: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/src/src-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    keithCoadd_icSrc: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/icSrc/icSrc-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd_icMatch: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/icMatch/icMatch-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd_psf: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/psf/psf-%(run)06d-%(filter)s%(camcol)d-%(field)04d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd_apCorr: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/apCorr/apCorr-%(run)06d-%(filter)s%(camcol)d-%(field)04d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keithCoadd_src: {
        template:      "keithCoadd-results/%(run)d/%(camcol)d/%(filter)s/src/src-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keith_processCoadd_config: {
        template:      "keith_processCoadd_config/%(run)d/%(camcol)d/%(filter)s/config-%(run)06d-%(filter)s%(camcol)d-%(field)04d.py"
        python:        "lsst.pipe.tasks.processKeithCoadd.ProcessKeithCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    keith_processCoadd_metadata: {
        template:      "keith_processCoadd_metadata/%(run)d/%(camcol)d/%(filter)s/metadata-%(run)06d-%(filter)s%(camcol)d-%(field)04d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    forcedsources: {
        template:      "sci-results/%(run)d/%(camcol)d/%(filter)s/forcedsources/forcedsources-%(run)06d-%(filter)s%(camcol)d-%(field)04d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    sourceHist: {
        template:      "results/st%(skyTile)d/sourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSourceHist: {
        template:      "results/st%(skyTile)d/badSourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    source: {
        template:      "results/st%(skyTile)d/source.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSource: {
        template:      "results/st%(skyTile)d/badSource.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    invalidSource: {
        template:      "results/st%(skyTile)d/invalidSource.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    object: {
        template:      "results/st%(skyTile)d/object.fits"
        python:        "lsst.ap.cluster.SourceClusterCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_config: {
        template:      "processCcd_config/%(run)d/%(camcol)d/%(filter)s/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.py"
        python:        "lsst.pipe.tasks.processCcdSdss.ProcessCcdSdssConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/%(run)d/%(camcol)d/%(filter)s/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    sourceAssoc_config: {
        template:      "sourceAssoc_config/st%(skyTile)d/config.py"
        python:        "lsst.ap.tasks.sourceAssoc.SourceAssocConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    sourceAssoc_metadata: {
        template:      "sourceAssoc_metadata/st%(skyTile)d/metadata.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forcedPhot_config: {
        template:      "forcedPhot_config/%(run)d/%(camcol)d/%(filter)s/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.py"
        python:        "lsst.pex.config.Config"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forcedPhot_metadata: {
        template:      "forcedPhot_metadata/%(run)d/%(camcol)d/%(filter)s/calexp-%(run)06d-%(filter)s%(camcol)d-%(field)04d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/coadd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/depth-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_initPsf: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/initPsf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    deep_makeSkyMap_config: {
        template:      "deepCoadd/config.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    deep_makeSkyMap_metadata: {
        template:      "deepCoadd/metadata.py"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    deep_coadd_config: {
        template:      "deep_coadd_config/%(filter)s/%(tract)d/%(patch)s/config-%(filter)s-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.outlierRejectedCoadd.OutlierRejectedCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_coadd_metadata: {
        template:      "deep_coadd_metadata/%(filter)s/%(tract)d/%(patch)s/metadata-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_calexp: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icSrc: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icSrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_icMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/icMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_psf: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/psf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_apCorr: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/apCorr-%(filter)s-%(tract)d-%(patch)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deepCoadd_src: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_config: {
        template:      "deep_processCoadd_config/%(filter)s/%(tract)d/%(patch)s/config-%(filter)s-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    deep_processCoadd_metadata: {
        template:      "deep_processCoadd_metadata/%(filter)s/%(tract)d/%(patch)s/metadata-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    goodSeeingCoadd: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s/coadd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_depth: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s/depth-%(filter)s-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_initPsf: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)s/initPsf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    goodSeeingCoadd_skyMap: {
        template:    "goodSeeingCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    goodSeeing_makeSkyMap_config: {
        template:      "goodSeeingCoadd/config.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    goodSeeing_makeSkyMap_metadata: {
        template:      "goodSeeingCoadd/metadata.py"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    goodSeeing_coadd_config: {
        template:      "goodSeeing_coadd_config/%(filter)s/%(tract)d/%(patch)s/config-%(filter)s-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.outlierRejectedCoadd.OutlierRejectedCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeing_coadd_metadata: {
        template:      "goodSeeing_coadd_metadata/%(filter)s/%(tract)d/%(patch)s/metadata-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_calexp: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/calexp-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_icSrc: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/icSrc-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_icMatch: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/icMatch-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_psf: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/psf-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_apCorr: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/apCorr-%(filter)s-%(tract)d-%(patch)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeingCoadd_src: {
        template:      "goodSeeingCoadd-results/%(filter)s/%(tract)d/%(patch)s/src-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeing_processCoadd_config: {
        template:      "goodSeeing_processCoadd_config/%(filter)s/%(tract)d/%(patch)s/config-%(filter)s-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    goodSeeing_processCoadd_metadata: {
        template:      "goodSeeing_processCoadd_metadata/%(filter)s/%(tract)d/%(patch)s/metadata-%(filter)s-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    chiSquaredCoadd: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)s/coadd-%(tract)d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    chiSquaredCoadd_initPsf: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)s/initPsf-%(tract)d-%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    chiSquaredCoadd_skyMap: {
        template:    "chiSquaredCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    chiSquared_makeSkyMap_config: {
        template:      "chiSquaredCoadd/config.py"
        python:        "lsst.pipe.tasks.makeSkyMap.MakeSkyMapTask.ConfigClass"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
    }
    chiSquared_makeSkyMap_metadata: {
        template:      "chiSquaredCoadd/metadata.py"
        python:        "lsst.daf.base.PropertySet"
        persistable:   "PropertySet"
        storage:       "BoostStorage"
        tables:        raw
    }
    chiSquared_coadd_config: {
        template:      "chiSquared_coadd_config/%(tract)d/%(patch)s/config-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.chiSquaredCoadd.ChiSquaredCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquared_coadd_metadata: {
        template:      "chiSquared_coadd_metadata/%(tract)d/%(patch)s/metadata-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_calexp: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/calexp-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_icSrc: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/icSrc-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_icMatch: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/icMatch-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_psf: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/psf-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_apCorr: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/apCorr-%(tract)d-%(patch)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquaredCoadd_src: {
        template:      "chiSquaredCoadd-results/%(tract)d/%(patch)s/src-%(tract)d-%(patch)s.boost"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "ignored"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquared_processCoadd_config: {
        template:      "chiSquared_processCoadd_config/%(tract)d/%(patch)s/config-%(tract)d-%(patch)s.py"
        python:        "lsst.pipe.tasks.processCoadd.ProcessCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    chiSquared_processCoadd_metadata: {
        template:      "chiSquared_processCoadd_metadata/%(tract)d/%(patch)s/metadata-%(tract)d-%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

}
